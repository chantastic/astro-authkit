---
import Layout from '../layouts/Layout.astro';
import {WorkOS, type SessionCookieData} from '@workos-inc/node';

export const prerender = false;

const cookie = Astro.cookies.get('wos-session');

if (!cookie?.value) {
	return Astro.redirect('/sign-in');
}

const workos = new WorkOS(import.meta.env.WORKOS_API_KEY, {
	clientId: import.meta.env.WORKOS_CLIENT_ID,
});

const autenticationResponse =
	await workos.userManagement.authenticateWithSessionCookie({
		sessionData: cookie.value,
		cookiePassword: import.meta.env.WORKOS_COOKIE_PASSWORD,
	});

if (
	!autenticationResponse.authenticated &&
	autenticationResponse.reason !== 'invalid_jwt'
) {
	return Astro.redirect('/sign-in');
}

const refreshResponse =
	await workos.userManagement.refreshAndSealSessionData({
		sessionData: cookie.value,
		cookiePassword: import.meta.env.WORKOS_COOKIE_PASSWORD,
	});

if (!refreshResponse.authenticated) {
	Astro.cookies.delete('wos-session', {
		path: '/',
		httpOnly: true,
		sameSite: 'lax',
		secure: true,
	});
	return Astro.redirect('/sign-in');
}

Astro.cookies.set(
	'wos-session',
	String(refreshResponse.sealedSession),
	{
		path: '/',
		httpOnly: true,
		sameSite: 'lax',
		secure: true,
	}
);

const {user} =
	((await workos.userManagement.getSessionFromCookie({
		sessionData: cookie.value,
		cookiePassword: import.meta.env.WORKOS_COOKIE_PASSWORD,
	})) ?? {firstName: 'Guest'}) as SessionCookieData;
---

<Layout title="Dashboard">
	<main>
		<h1>Dashboard</h1>
		<p>
			Welcome {user.firstName}!
		</p>
		<a href="/sign-out" astro-prefetch="false">Sign out</a>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
</style>
